import{_ as s,c as i,o as a,V as n}from"./chunks/framework.qP9-rlTe.js";const g=JSON.parse('{"title":"状态管理","description":"","frontmatter":{},"headers":[],"relativePath":"zh/plugins/editor/state-management.md","filePath":"zh/plugins/editor/state-management.md","lastUpdated":1705556984000}'),t={name:"zh/plugins/editor/state-management.md"},e=n(`<h1 id="状态管理" tabindex="-1">状态管理 <a class="header-anchor" href="#状态管理" aria-label="Permalink to &quot;状态管理&quot;">​</a></h1><hr><p>本节旨在介绍<a href="./editor-extensions.html">编辑器扩展</a>的状态管理。</p><blockquote><p>[!NOTE]</p><p>本页旨在为Obsidian插件开发人员提炼 CodeMirror 6 的官方文档。有关状态管理的更多详细信息，请参阅 <a href="https://codemirror.net/docs/guide/#state-and-updates" target="_blank" rel="noreferrer">State and Updates</a>。</p></blockquote><h2 id="状态更改" tabindex="-1">状态更改 <a class="header-anchor" href="#状态更改" aria-label="Permalink to &quot;状态更改&quot;">​</a></h2><p>在大多数应用程序中，通常通过为属性或变量分配新值来更新状态。然后旧值将被替代。</p><div class="language-ts vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">ts</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">let</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> note </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &quot;&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">note </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &quot;Heading&quot;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">note </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &quot;# Heading&quot;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">note </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &quot;## Heading&quot;</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"> // How to undo this?</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br></div></div><p>为了支持撤消和重做对用户工作区的更改等功能，Obsidian会保留已进行的所有更改的历史记录。若要撤消更改，可以返回到进行更改之前的某个时间点。</p><table><thead><tr><th></th><th>状态字段</th></tr></thead><tbody><tr><td>0</td><td></td></tr><tr><td>1</td><td>Heading 标题</td></tr><tr><td>2</td><td># Heading # 标题</td></tr><tr><td>3</td><td>## Heading ## 标题</td></tr></tbody></table><p>在 TypeScript 中，你会得到这样的结果：</p><div class="language-ts vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">ts</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">const</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> changes</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">:</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> ChangeSpec</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">[] </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> [];</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">changes.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">push</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">({ from: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">0</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, insert: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;Heading&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> });</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">changes.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">push</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">({ from: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">0</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, insert: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;# &quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> });</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">changes.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">push</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">({ from: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">0</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, insert: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;#&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> });</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br></div></div><h2 id="事务" tabindex="-1">事务 <a class="header-anchor" href="#事务" aria-label="Permalink to &quot;事务&quot;">​</a></h2><p>Imagine a feature where you select some text and press the double quote, <code>&quot;</code> to surround the selection with quotes on both sides. One way to implement the feature would be to:<br> 想象一下，您选择一些文本并按下双引号， <code>&quot;</code> 以用引号将选择的两边都括起来。实现该功能的一种方法是：</p><ol><li>在所选内容的开头插入 <code>&quot;</code> 。</li><li>在所选内容的结尾插入 <code>&quot;</code>。</li></ol><p>请注意，该实现由两个状态更改组成。如果将这些内容添加到撤消历史记录中，则用户需要撤消两次，每个双引号撤消一次。为了避免这种情况，如果您可以将这些更改分组，使它们显示为一个，会怎么样？</p><p>对于编辑器扩展，一起发生的一组状态更改称为事务。</p><p>如果将到目前为止所学的知识结合起来，并且允许仅包含单个状态更改的事务，则可以将状态视为事务历史记录。</p><p>将所有这些结合在一起，在编辑器扩展中实现之前的环绕特性，以下是向编辑器视图添加或分派事务的方法：</p><div class="language-ts vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">ts</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">view.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">dispatch</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">({</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  changes: [</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    { from: selectionStart, insert: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">\`&quot;\`</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> },</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    { from: selectionEnd, insert: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">\`&quot;\`</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  ]</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">});</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br></div></div><h2 id="下一步" tabindex="-1">下一步 <a class="header-anchor" href="#下一步" aria-label="Permalink to &quot;下一步&quot;">​</a></h2><p>在本节，您了解了如何将状态建模为一系列状态更改，以及如何将它们分组到事务中。</p><p>要了解如何在编辑器中管理自定义状态，请参阅<a href="./state-fields.html">状态字段</a>。</p>`,22),p=[e];function l(h,r,k,d,o,E){return a(),i("div",null,p)}const u=s(t,[["render",l]]);export{g as __pageData,u as default};
