import{_ as s,c as i,o as a,V as n}from"./chunks/framework.qP9-rlTe.js";const g=JSON.parse('{"title":"插件指南","description":"","frontmatter":{},"headers":[],"relativePath":"zh/plugins/releasing/plugin-guidelines.md","filePath":"zh/plugins/releasing/plugin-guidelines.md","lastUpdated":1705557346000}'),e={name:"zh/plugins/releasing/plugin-guidelines.md"},l=n(`<h1 id="插件指南" tabindex="-1">插件指南 <a class="header-anchor" href="#插件指南" aria-label="Permalink to &quot;插件指南&quot;">​</a></h1><hr><p>本页列出了插件作者在提交插件时收到的常见评审意见。</p><p>虽然此页面上的指南是建议，但根据其严重程度，我们可能仍会要求您解决违规问题。</p><p>插件开发者政策</p><p>Make sure that you&#39;ve read our <a href="https://docs.obsidian.md/Developer+policies" target="_blank" rel="noreferrer">Developer policies</a> as well as the <a href="https://docs.obsidian.md/Plugins/Releasing/Submission+requirements+for+plugins" target="_blank" rel="noreferrer">Submission requirements for plugins</a>.<br> 请务必阅读我们的<a href="./../../developer-policies.html">开发者政策</a>以及<a href="./submission-requirements-for-plugins.html">插件的提交要求</a>。</p><h2 id="常规" tabindex="-1">常规 <a class="header-anchor" href="#常规" aria-label="Permalink to &quot;常规&quot;">​</a></h2><h3 id="避免使用全局应用实例" tabindex="-1">避免使用全局应用实例 <a class="header-anchor" href="#避免使用全局应用实例" aria-label="Permalink to &quot;避免使用全局应用实例&quot;">​</a></h3><p>避免使用全局应用对象 <code>app</code> （或 <code>window.app</code> ）。请改用插件实例提供的引用  <code>this.app</code>。</p><p>全局应用对象用于调试目的，将来可能会被删除。</p><h2 id="ui-文本" tabindex="-1">UI 文本 <a class="header-anchor" href="#ui-文本" aria-label="Permalink to &quot;UI 文本&quot;">​</a></h2><p>本部分列出了在用户界面中设置文本格式的准则，例如设置、命令和按钮。</p><p>下面的“设置”→“外观”中的示例演示了用户界面中文本的准则。</p><p><img src="https://publish-01.obsidian.md/access/caa27d6312fe5c26ebc657cc609543be/Assets/settings-headings.png" alt="settings-headings.png"></p><ol><li><a href="https://docs.obsidian.md/Plugins/Releasing/Plugin+guidelines#Only%20use%20headings%20under%20settings%20if%20you%20have%20more%20than%20one%20section." target="_blank" rel="noreferrer">常规设置位于顶部，没有标题</a>。</li><li><a href="https://docs.obsidian.md/Plugins/Releasing/Plugin+guidelines#Avoid%20%22settings%22%20in%20settings%20headings" target="_blank" rel="noreferrer">章节标题的标题文本中没有“设置”</a>。</li><li><a href="https://docs.obsidian.md/Plugins/Releasing/Plugin+guidelines#Use%20Sentence%20case%20in%20UI" target="_blank" rel="noreferrer">在 UI 中使用句子大小写</a>。</li></ol><p>有关Obsidian编写和格式化文本的更多信息，请参阅我们的<a href="https://help.obsidian.md/Contributing+to+Obsidian/Style+guide" target="_blank" rel="noreferrer">样式指南</a>。</p><h3 id="仅当有多个部分时-才使用设置下的标题。" tabindex="-1">仅当有多个部分时，才使用设置下的标题。 <a class="header-anchor" href="#仅当有多个部分时-才使用设置下的标题。" aria-label="Permalink to &quot;仅当有多个部分时，才使用设置下的标题。&quot;">​</a></h3><p>避免在设置选项卡中添加顶级标题，例如“常规”、“设置”或插件名称。</p><p>如果设置下有多个部分，并且其中一个包含常规设置，请将它们保留在顶部，而不添加标题。</p><p>例如，查看“设置”→“外观”下的设置。</p><h3 id="避免在设置标题中使用-设置" tabindex="-1">避免在设置标题中使用“设置” <a class="header-anchor" href="#避免在设置标题中使用-设置" aria-label="Permalink to &quot;避免在设置标题中使用“设置”&quot;">​</a></h3><p>在设置选项卡中，您可以添加标题来组织设置。避免在这些标题中包含“设置”一词。由于设置选项卡下的所有内容都是设置，因此对每个标题重复它变得多余。</p><ul><li>首选“高级”而不是“高级设置”。</li><li>首选“模板”而不是“模板设置”。</li></ul><h3 id="在ui中使用句子大小写" tabindex="-1">在UI中使用句子大小写 <a class="header-anchor" href="#在ui中使用句子大小写" aria-label="Permalink to &quot;在UI中使用句子大小写&quot;">​</a></h3><p>UI 元素中的任何文本都应使用<a href="https://en.wiktionary.org/wiki/sentence_case" target="_blank" rel="noreferrer">句子大小写</a>而不是<a href="https://en.wikipedia.org/wiki/Title_case" target="_blank" rel="noreferrer">标题大小写</a>，其中只有句子中的第一个单词和专有名词应大写。</p><ul><li>首选 &quot;Template folder location&quot; 而不是 &quot;Template Folder Location&quot;。</li><li>首选 &quot;Create new note&quot; 而不是 &quot;Create New Note&quot;。</li></ul><h2 id="安全" tabindex="-1">安全 <a class="header-anchor" href="#安全" aria-label="Permalink to &quot;安全&quot;">​</a></h2><h3 id="避免-innerhtml-和-outerhtml-insertadjacenthtml" tabindex="-1">避免 <code>innerHTML</code> 和 <code>outerHTML</code> <code>insertAdjacentHTML</code> <a class="header-anchor" href="#避免-innerhtml-和-outerhtml-insertadjacenthtml" aria-label="Permalink to &quot;避免 \`innerHTML\` 和 \`outerHTML\` \`insertAdjacentHTML\`&quot;">​</a></h3><p>从用户定义的输入构建 DOM 元素，使用 <code>innerHTML</code> 和 <code>outerHTML</code> <code>insertAdjacentHTML</code> 可能会带来安全风险。</p><p>下面的示例使用包含用户输入的字符串生成 DOM 元素 <code>\${name}</code> 。 <code>name</code> 可以包含其他 DOM 元素，例如 <code>&lt;script&gt;alert()&lt;/script&gt;</code> ，并可允许潜在攻击者在用户计算机上执行任意代码。</p><div class="language-ts vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">ts</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">function</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> showName</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">name</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">:</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> string</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">  let</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> containerElement </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> document.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">querySelector</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;.my-container&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">);</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">  // DON&#39;T DO THIS</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  containerElement.innerHTML </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> \`&lt;div class=&quot;my-class&quot;&gt;&lt;b&gt;Your name is: &lt;/b&gt;\${</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">name</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">}&lt;/div&gt;\`</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br></div></div><p>请改用 DOM API 或Obsidian帮助程序函数（如 <code>createEl()</code> ） <code>createDiv()</code> <code>createSpan()</code> 以编程方式生成 DOM 元素。有关更多信息，请参阅 <a href="./../user-interface/html-elements.html">HTML 元素</a>。</p><h2 id="资源管理" tabindex="-1">资源管理 <a class="header-anchor" href="#资源管理" aria-label="Permalink to &quot;资源管理&quot;">​</a></h2><h3 id="插件卸载时清理资源" tabindex="-1">插件卸载时清理资源 <a class="header-anchor" href="#插件卸载时清理资源" aria-label="Permalink to &quot;插件卸载时清理资源&quot;">​</a></h3><p>插件创建的任何资源（例如事件侦听器）都必须在插件卸载时销毁或释放。</p><p>如果可能，请使用 <a href="https://docs.obsidian.md/Reference/TypeScript+API/Component/registerEvent" target="_blank" rel="noreferrer">registerEvent()</a> 或 <a href="https://docs.obsidian.md/Reference/TypeScript+API/Plugin/addCommand" target="_blank" rel="noreferrer">addCommand()</a> 等方法在插件卸载时自动清理资源。</p><div class="language-ts vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">ts</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">export</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> default</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> class</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> MyPlugin</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> extends</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> Plugin</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">  onload</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">() {</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">    this</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">registerEvent</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">this</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">.app.vault.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">on</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;create&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">this</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">.onCreate));</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  }</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">  onCreate</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">:</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">file</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">:</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> TAbstractFile</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=&gt;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">    // ...</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br></div></div><blockquote><p>[!NOTE]</p><p>您无需清理在插件卸载时删除的资源。例如，如果在 DOM 元素上注册 <code>mouseenter</code> 侦听器，当该元素超出范围时，将对事件侦听器进行垃圾回收。</p></blockquote><h3 id="不要在onunload分离-leaves" tabindex="-1">不要在<code>onunload</code>分离 leaves <a class="header-anchor" href="#不要在onunload分离-leaves" aria-label="Permalink to &quot;不要在\`onunload\`分离 leaves&quot;">​</a></h3><p>当用户更新您的插件时，任何打开的叶子都将在其原始位置重新初始化，无论用户将它们移动到何处。</p><h2 id="命令" tabindex="-1">命令 <a class="header-anchor" href="#命令" aria-label="Permalink to &quot;命令&quot;">​</a></h2><h3 id="避免为命令设置默认热键" tabindex="-1">避免为命令设置默认热键 <a class="header-anchor" href="#避免为命令设置默认热键" aria-label="Permalink to &quot;避免为命令设置默认热键&quot;">​</a></h3><p>设置默认热键可能会导致插件之间发生冲突，并可能覆盖用户已配置的热键。</p><p>选择所有操作系统上都可用的默认热键很困难。</p><h3 id="对命令使用适当的回调类型" tabindex="-1">对命令使用适当的回调类型 <a class="header-anchor" href="#对命令使用适当的回调类型" aria-label="Permalink to &quot;对命令使用适当的回调类型&quot;">​</a></h3><p>在插件中添加命令时，请使用适当的回调类型。</p><ul><li>如果命令无条件运行，则使用 <code>callback</code> 。</li><li>如果命令仅在特定条件下运行，则使用 <code>checkCallback</code> 。</li></ul><p>如果该命令需要打开且处于活动状态的 Markdown 编辑器，请使用 <code>editorCallback</code> 或相应的 <code>editorCheckCallback</code> .</p><h2 id="工作区" tabindex="-1">工作区 <a class="header-anchor" href="#工作区" aria-label="Permalink to &quot;工作区&quot;">​</a></h2><h3 id="避免直接访问-workspace-activeleaf" tabindex="-1">避免直接访问 <code>workspace.activeLeaf</code> <a class="header-anchor" href="#避免直接访问-workspace-activeleaf" aria-label="Permalink to &quot;避免直接访问 \`workspace.activeLeaf\`&quot;">​</a></h3><p>如果要访问活动视图，请改用 <a href="https://docs.obsidian.md/Reference/TypeScript+API/Workspace/getActiveViewOfType" target="_blank" rel="noreferrer">getActiveViewOfType()</a> ：</p><div class="language-ts vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">ts</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">const</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> view</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> this</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">.app.workspace.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">getActiveViewOfType</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(MarkdownView);</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// getActiveViewOfType will return null if the active view is null, or if it&#39;s not a MarkdownView.</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">if</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (view) {</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">  // ...</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br></div></div><p>如果要访问活动笔记中的编辑器，请改用 <code>activeEditor</code> ：</p><div class="language-ts vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">ts</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">const</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> editor</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> this</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">.app.workspace.activeEditor;</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div><h3 id="避免管理对自定义视图的引用" tabindex="-1">避免管理对自定义视图的引用 <a class="header-anchor" href="#避免管理对自定义视图的引用" aria-label="Permalink to &quot;避免管理对自定义视图的引用&quot;">​</a></h3><p>管理对自定义视图的引用可能会导致内存泄漏或意外后果。</p><p>不要：</p><div class="language-ts vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">ts</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">this</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">registerViewType</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">MY_VIEW_TYPE</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, () </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=&gt;</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> this</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">.view </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> new</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> MyCustomView</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">());</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div><p>请改为执行此操作：</p><div class="language-ts vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">ts</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">this</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">registerViewType</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">MY_VIEW_TYPE</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, () </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=&gt;</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> new</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> MyCustomView</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">());</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div><p>要从插件访问视图，请使用 <code>Workspace.getActiveLeavesOfType()</code> ：</p><div class="language-ts vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">ts</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">for</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">let</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> leaf </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">of</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> app.workspace.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">getActiveLeavesOfType</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">MY_VIEW_TYPE</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)) {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">  let</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> view </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> leaf.view;</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">  if</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (view </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">instanceof</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> MyCustomView</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) {</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">    // ...</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br></div></div><h2 id="库" tabindex="-1">库 <a class="header-anchor" href="#库" aria-label="Permalink to &quot;库&quot;">​</a></h2><h3 id="首选编辑器-api-而不是-vault-modify" tabindex="-1">首选编辑器 API，而不是 <code>Vault.modify</code> <a class="header-anchor" href="#首选编辑器-api-而不是-vault-modify" aria-label="Permalink to &quot;首选编辑器 API，而不是 \`Vault.modify\`&quot;">​</a></h3><p>如果要编辑活动注释，请使用 <a href="https://docs.obsidian.md/Plugins/Editor/Editor" target="_blank" rel="noreferrer">Editor</a> 接口，而不是 <a href="https://docs.obsidian.md/Reference/TypeScript+API/Vault/modify" target="_blank" rel="noreferrer">Vault.modify()</a>。</p><p>编辑器会维护有关活动笔记的信息，例如光标位置、选择和折叠内容。当您使用 <a href="https://docs.obsidian.md/Reference/TypeScript+API/Vault/modify" target="_blank" rel="noreferrer">Vault.modify()</a> 编辑注释时，所有这些信息都会丢失，这会导致用户体验不佳。</p><p>在对笔记的某些部分进行小的更改时，编辑器也更有效率。</p><p>仅当您在后台编辑文件时，才使用 Vault.modify（）。</p><h3 id="首选-vault-api-而不是适配器-api" tabindex="-1">首选 Vault API 而不是适配器 API <a class="header-anchor" href="#首选-vault-api-而不是适配器-api" aria-label="Permalink to &quot;首选 Vault API 而不是适配器 API&quot;">​</a></h3><p>Obsidian公开了两个用于文件操作的 API：Vault API （ <code>app.vault</code> ） 和适配器 API （ <code>app.vault.adapter</code> ）。</p><p>虽然许多开发人员通常更熟悉适配器 API 中的文件操作，但与适配器相比，Vault API 有两个主要优势。</p><ul><li>性能：Vault API 具有一个缓存层，当Obsidian文件已知时，该缓存层可以加快文件读取速度。</li><li>安全性：Vault API 按顺序执行文件操作，以避免出现任何争用条件，例如在读取同时写入的文件时。</li></ul><h3 id="避免遍历所有文件-建议按路径查找文件" tabindex="-1">避免遍历所有文件，建议按路径查找文件 <a class="header-anchor" href="#避免遍历所有文件-建议按路径查找文件" aria-label="Permalink to &quot;避免遍历所有文件，建议按路径查找文件&quot;">​</a></h3><p>遍历文件是低效的，特别是对于大型库。请改用 <a href="https://docs.obsidian.md/Reference/TypeScript+API/Vault/getAbstractFileByPath" target="_blank" rel="noreferrer">getAbstractFileByPath()</a> 。</p><p>不建议：</p><div class="language-ts vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">ts</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">vault.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">getAllFiles</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">().</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">find</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">file</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =&gt;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> file.path </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">===</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> filePath)</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div><p>请改为执行此操作：</p><div class="language-ts vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">ts</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">const</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> filePath</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &#39;folder/file.md&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">const</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> file</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> app.vault.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">getAbstractFileByPath</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(filePath);</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// Check if it exists and is of the correct type</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">if</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (file </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">instanceof</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> TFile</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) {</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">  // file is automatically casted to TFile within this scope.</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br></div></div><h3 id="使用-normalizepath-清理用户定义的路径" tabindex="-1">使用 <code>normalizePath()</code> 清理用户定义的路径 <a class="header-anchor" href="#使用-normalizepath-清理用户定义的路径" aria-label="Permalink to &quot;使用 \`normalizePath()\` 清理用户定义的路径&quot;">​</a></h3><p>每当您访问库中文件或文件夹的用户定义路径时，或者当您在插件代码中构造自己的路径时，请使用  <a href="https://docs.obsidian.md/Reference/TypeScript+API/normalizePath" target="_blank" rel="noreferrer">normalizePath()</a> 。</p><p>通过<code>normalizePath()</code> 获取路径并清理它，以确保文件系统和跨平台使用的安全。此功能：</p><ul><li>清理正斜杠和反斜杠的使用，例如将 1 个或多个 <code>\\</code> 或 <code>/</code> 替换为单个 <code>/</code> 。</li><li>删除前导和后导斜杠。</li><li>将任何不间断空格 替换为 <code>\\u00A0</code> 常规空格。</li><li>通过 <a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/String/normalize" target="_blank" rel="noreferrer">String.prototype.normalize</a> 执行路径。</li></ul><div class="language-ts vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">ts</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">import</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> { normalizePath } </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">from</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &quot;obsidian&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">const</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> pathToPlugin</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> normalizePath</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(app.vault.configDir </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">+</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &quot;//plugins/my-plugin&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">);</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// pathToPlugin contains &quot;.obsidian/plugins/my-plugin&quot; not .obsidian//plugins/my-plugin</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br></div></div><h2 id="编辑器" tabindex="-1">编辑器 <a class="header-anchor" href="#编辑器" aria-label="Permalink to &quot;编辑器&quot;">​</a></h2><h3 id="更改或重新配置编辑器扩展" tabindex="-1">更改或重新配置编辑器扩展 <a class="header-anchor" href="#更改或重新配置编辑器扩展" aria-label="Permalink to &quot;更改或重新配置编辑器扩展&quot;">​</a></h3><p>如果要在使用 <a href="https://docs.obsidian.md/Reference/TypeScript+API/Plugin/registerEditorExtension" target="_blank" rel="noreferrer">registerEditorExtension()</a>, 注册后更改或重新配置<a href="./../editor/editor-extensions.html">编辑器扩展</a>，请使用 <a href="https://docs.obsidian.md/Reference/TypeScript+API/Workspace/updateOptions" target="_blank" rel="noreferrer">updateOptions()</a> 更新所有编辑器。</p><div class="language-ts vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">ts</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">class</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> MyPlugin</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> extends</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> Plugin</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">  private</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;"> editorExtension</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">:</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> Extension</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">[] </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> [];</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">  onload</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">() {</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">    //...</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">    this</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">registerEditorExtension</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">this</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">.editorExtension);</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  }</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">  updateEditorExtension</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">() {</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">    // Empty the array while keeping the same reference</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">    // (Don&#39;t create a new array here)</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">    this</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">.editorExtension.</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">length</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 0</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">    // Create new editor extension</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    let</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> myNewExtension </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> this</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">createEditorExtension</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">();</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">    // Add it to the array</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">    this</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">.editorExtension.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">push</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(myNewExtension);</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">    // Flush the changes to all editors</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">    this</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">.app.workspace.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">updateOptions</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">();</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br><span class="line-number">22</span><br><span class="line-number">23</span><br></div></div><h2 id="typescript" tabindex="-1">TypeScript <a class="header-anchor" href="#typescript" aria-label="Permalink to &quot;TypeScript&quot;">​</a></h2><h3 id="使用-const-和-let-优于-var" tabindex="-1">使用 <code>const</code> 和 <code>let</code> 优于 <code>var</code> <a class="header-anchor" href="#使用-const-和-let-优于-var" aria-label="Permalink to &quot;使用 \`const\` 和 \`let\` 优于 \`var\`&quot;">​</a></h3><p>有关更多信息，请参阅<a href="https://javascript.plainenglish.io/4-reasons-why-var-is-considered-obsolete-in-modern-javascript-a30296b5f08f" target="_blank" rel="noreferrer">在现代 JavaScript 中 var 被认为过时的 4 个原因</a>。</p><h3 id="首选-async-await-而不是-promise" tabindex="-1">首选 async/await 而不是 Promise <a class="header-anchor" href="#首选-async-await-而不是-promise" aria-label="Permalink to &quot;首选 async/await 而不是 Promise&quot;">​</a></h3><p>最新版本的 JavaScript 和 TypeScript 支持 <code>async</code> and <code>await</code> 关键字异步运行代码，这使代码比用 Promise 更具可读性。</p><p>不建议：</p><div class="language-ts vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">ts</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">function</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> test</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">()</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">:</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> Promise</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&lt;</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">string</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> |</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> null</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt; {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">  return</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> requestUrl</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;https://example.com&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    .</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">then</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">res</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =&gt;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> res.text</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    .</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">catch</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">e</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =&gt;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">      console.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">log</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(e);</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">      return</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> null</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    });</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br></div></div><p>请改为执行此操作：</p><div class="language-ts vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">ts</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">async</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> function</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> AsyncTest</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">()</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">:</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> Promise</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&lt;</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">string</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> |</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> null</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt; {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">  try</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    let</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> res </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> await</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> requestUrl</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;https://example.com&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">);</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    let</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> text </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> await</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> r.text;</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    return</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> text;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  }</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">  catch</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (e) {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    console.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">log</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(e);</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    return</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> null</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br></div></div><h3 id="考虑使用文件夹组织代码库" tabindex="-1">考虑使用文件夹组织代码库 <a class="header-anchor" href="#考虑使用文件夹组织代码库" aria-label="Permalink to &quot;考虑使用文件夹组织代码库&quot;">​</a></h3><p>如果您的插件使用多个 <code>.ts</code> 文件，请考虑将它们组织到文件夹中，以便于查看和维护。</p><h3 id="重命名占位符类名" tabindex="-1">重命名占位符类名 <a class="header-anchor" href="#重命名占位符类名" aria-label="Permalink to &quot;重命名占位符类名&quot;">​</a></h3><p>示例插件包含常见类的占位符名称，例如 <code>MyPlugin</code> 、 <code>MyPluginSettings</code> 和 <code>SampleSettingTab</code> 。重命名这些名称以反映插件的名称。</p>`,100),t=[l];function p(h,r,k,d,o,c){return a(),i("div",null,t)}const u=s(e,[["render",p]]);export{g as __pageData,u as default};
